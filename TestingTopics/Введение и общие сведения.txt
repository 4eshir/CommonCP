#Метод динамического программирования, предложенный Р.Беллманом заключается:
+1) В определении оптимального решения n-мерной задачи, разделяя ее на n отдельных этапов
-2) В последовательном выполнении целостных программных единиц задачи
-3) В оптимизации классических алгоритмов
-4) В определении оптимального решения задачи
#Метод динамического программирования предложел:
-1) Ф.Нейман
-2) А.Тюринг
-3) А.Черч
+4) Р.Беллман
-5) С.Лефшец
#Основное преимущество динамического программирования:
-1) Возможность перебора всех возможных решений задачи и выбор оптимального решения
+2) Одномерная оптимизация задач путем разбиения её на подзадачи
-4) Способность имитировать различных исполнителей реализуя процесс пошаговых вычислений
-5) Возможность собрать подпрограммы в более крупную программу используя абстрактные возможности языка программирования
#Определите, в каком случае целесообразнее применять динамическое программирование:
-1) Когда подзадачи не связанны между собой
+2) Когда подзадачи взаимосвязанны
-3) Когда подзадачи решают одно и то же, для проверки правильности решений
-4) Когда подзадачи не нагружают память персонального компьютера
#Выберите наиболее верное определение динамического программирования из предложенных студентами:
-1) - решение задачи таким способом, чтобы была отражена динамика решения состоящая из удачнх и не очень попыток решающего
-2) - возможность решения задачи несколькими способами, для проверки всех возможных вариантов ответов
+3) - это когда у нас есть задача, которую непонятно как решать и мы разбиваем её на подзадачи, которые тоже не понятно как решать
-4) - имитация пошаговых действий при выполнении решения сложной задачи, чтобы решение казалось наиболее верным и оптимальным
=
#Решение задачи динамическим программированием должно:
-1) Содержать параметры из неявной логики позволяющие рассматривать задачу под разными углами 
-2) Создавать имитацию различных пошаговых действий и вывод единственно высчитанного решения
+3) Содержать параметры из чёткой логики позволяющие однозначно задать подзадачи
+4) Содержать порядок пересчёта
-5) Содержать множественный пересчёт подзадач, даже если они уже встречались ранее в задаче
+6) Выдавать ответ на задачу
-7) Не иметь перекрывающииеся подзадачи
-8) Иметь как можно меньше подзадач
-9) Находить ответ как можно быстрее, даже если оно не корректно, имеет ошибки или в корне не верно
+10) Содержать значение начальных состояний
#Что представляет собой состояние динамики
-1) Сохранение программных решение и состояний при экстренном завершении 
-2) Совокупность понятий и обозначений
-3) Описание движения мысли решающего задачу
+4) Параметры однозначно задающие задачу
-5) Наличие массива, который хранит все значения переменной после того как она изменилась в резултате пересчёта по формуле
-6) Совокупность всх псевдошагов
#В чём состоит принцип отпимальности:
+1) Решение на каждом шаге оптимально по отношению к предыдущему шагу
-2) Поиск такого ответа, чтобы его решение было самым быстрым из возможных
-3) Поиск оптимального, наиболее похожим на правду "магического" ответа
-4) Вычисление ответа на задачу различными способами и сравнение их, с нахождением оптимального по начальным параметрам
-5) Наличие минимального значения начальных состояний
#Выберите пункт который содержит характерные признаки, по которым можно определить, что задача решается методом динамического программирования:
-1) Рекурсивное решение и наличие перекрывающихся подзадач
-2) Возможность разбиения задачи на более мелкие подзадачи
-3) Оптимальность для подзадач и возможность рекурсивного решения
-4) Необходимость экономить время и желание создать собственную структуру данных для промежуточных решений
-5) Наличие большого количества параметров в задаче
+6) Оптимальность для подзадач и наличие в задаче прерывающихся подзадач
#В динамическом программировании существует возможность:
+1) Не вычислять ответ при встрече с решённой подзадачей
-2) Оптимального взаимодействия программы и пользователя, с получением минимально возможного облучения последнего
-3) Не вычислять ответ, а использовать "магические " цифры для ответа
-4) Вычислять ответ для задачи различными способами, пересчитывая каждую подзадачу n-раз для проверки
-5) Не разделять задачу на подзадачи, а использовать метод n-ого вычисления
=
#Важнейшая парадигма разработки алгоритмов, заключающася в рекурсивном разбиении решаемой задачи на элементарные подзадачи того же типа, но меньшего размера, и комбинирование их решений для получения ответа к исходной задаче называется
+разделяй и властвуй
#Как называются подзадачи, которые используются для решения некоторого количества задач большего размера
+перекрывающиеся подзадачи
#Порядок, в котором будут пересчитывать все состояния, используемые в подзадачах
+порядок пересчёта
#Описание объекта или процесса внутри самого себя. Запишите название, когда объект являются частью самого себя
+рекурсия 
#Вычисления на основе значений предыдущих членов последовательности называются
+рекуррентность