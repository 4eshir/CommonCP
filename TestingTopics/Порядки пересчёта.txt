#Как называется порядок пересчёта при которой последовательнось пересчитывается исходя из уже посчитанных
-1) Односторонний порядок
-2) Обратный порядок
-3) Сложная динамика
+4) Прямой порядок
-5) Ленивая динамика
#Как называется порядок пересчёта при котором состояния i + 1 объектов зависят от состояния i-ого
-1) Односторонний порядок
-2) Обратимый порядок
+3) Обратный порядок
-4) Сложная динамика
-5) Прямой порядок
-6) Ленивая динамика
#В чем заключается "ленивость" динамики:
+1) Необходимость написать рекурсию с условием выхода при значении, совпадающим с одним из начальных значений
-2) Необходимость заранее просчитыванить способы обхода графа состояний
-3) Необходимость написания большоко количества операций для подзадач
+4) Отсутствие необходимость просчитывать заранее способ обхода
-6) Пересчёт состояний исходя из предыдущих значений
-7) Пересчёт состояний исходя из того, что количество циклов за которое задача должна быть решена не больше n
#Для ускоренного решения задачи необходимо размещение данных в специально отведённом месте для ускоренного доступа, данное действие называется
-1) Прямой порядок пересчёта
+2) Кеширование
-3) Использовать любой из методов, кроме ленивого, динамического программирования
-4) Оптимизационный подход
-5) хеш-таблица с использованием перекрывающихся подзадач
# Среднее время выполнения задач в динамическом программировании при использовании обратного порядка пересчёта
+1) O (n^k)
-2) O ( log2(n))
-3) O (n)
-4) O ( n^2)
-5) O ( n^3)
-6) O (n * log2 (n))
=
#Выберите все пункты, которые содержат название порядков пересчёта
-1)Внутренняя динамика
-2)Односторонний порядок
+3)Ленивая динамика
-4)Оптимальная динамика
-5)Рекурсивный порядок
+6)Прямой порядок
+7)Обратный порядок
#Как называется данный порядок пересчёта # F[i] = F[i - 1] + F[i - 2]; #
-1)Односторонний порядок
-2)Обратный порядок
-3)Сложная динамика
+4)Прямой порядок
-5)Ленивая динамика
#Выберите один из ответов, которые дали нерадивую студенты, когда их попросили объяснить что такое ленивая динамика
-1) Это очень сложная функция пересчёта, которая названна ленивой потому что она очень долгая, из-за большого количества рекурсивных вызовов
+2) Это мемоизированная функция пересчёта
-3) Это типа что-то вроде поика в глубину по графу, где рёбра это ну ациклическая зависимость
+4) Поиск в глубину по графу, где рёбра это типа зависимость между ними, а ещё граф ацикличный 
+5) Это сохранение рецультатов функции пересчёта, для предотвращения повторного пересчёта 
-6) Это то что удобно применять, когда не знаешь как решать задачу и она подходит для решения рекурсией
#В динамическом программировании позникает проблема в большом количестве лишних операций. Как данную проблему решают в большистве задач?
+1) Использование кеширования данных
-2) Использование ленивой динамики
-3) Использование мемоизированной динамики
-4) Использование обхода по графу, с запоминанием пройденных вершин
-5) Отсечение n-ого количества решений, в случае если ответ получен на основе одной из подзадач и является правильным в большей или меньшей степени
#Для чего используют кеширование данных в динамическом программировании?
-1) Для сохранения всех используемых операций
-2) Для сохранения всех медленных операций
+3) Для устранения большого количества лишних операций
-4) Для сохранения некоторых промежуточных вариантов
=
#Напишите пример прямого порядка пересчёта i-ого числа Фибонначи
+f[i] = f[i - 1] + f[i - 2]
#Напишите самый простой пример обратного порядка пересчёта
+f[i + 1] += f[i]
#Напишите название последнего порядка пересчёта: обратный порядок, прямой порядок
+ленивая динамика
#Размещение данных в специально отведенном месте для ускоренного доступа к ним в будущем
+кеширование
#Напишите название структуры данных, реализующую интерфейс ассоциативного массива для хранения пары (ключ и значение) и выполняющую три операции: операции поиска и удаления пары по ключу, добавление новой пары
+хеш-таблица